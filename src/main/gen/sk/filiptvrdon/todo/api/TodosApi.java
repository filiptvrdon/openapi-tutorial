/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.filiptvrdon.todo.api;

import sk.filiptvrdon.todo.model.Todo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-13T11:40:12.191+02:00[Europe/Prague]")
@Validated
@Tag(name = "todos", description = "the todos API")
public interface TodosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /todos : Create a todo
     * Creates a new instance of a &#x60;todo&#x60;.
     *
     * @param todo A new &#x60;todo&#x60; to be created. (required)
     * @param completed Show completed/uncompleted Todo Items (optional)
     * @return Successful response. (status code 201)
     */
    @Operation(
        operationId = "createTodo",
        summary = "Create a todo",
        description = "Creates a new instance of a `todo`.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/todos",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createTodo(
        @Parameter(name = "Todo", description = "A new `todo` to be created.", required = true) @Valid @RequestBody Todo todo,
        @Parameter(name = "completed", description = "Show completed/uncompleted Todo Items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completed", required = false) Boolean completed
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /todos/{todoId} : Delete a todo
     * Deletes an existing &#x60;todo&#x60;.
     *
     * @param todoId A unique identifier for a &#x60;todo&#x60;. (required)
     * @return Successful response. (status code 204)
     *         or Todo Item not found! (status code 404)
     */
    @Operation(
        operationId = "deleteTodo",
        summary = "Delete a todo",
        description = "Deletes an existing `todo`.",
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful response."),
            @ApiResponse(responseCode = "404", description = "Todo Item not found!")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/todos/{todoId}"
    )
    default ResponseEntity<Void> deleteTodo(
        @Parameter(name = "todoId", description = "A unique identifier for a `todo`.", required = true, in = ParameterIn.PATH) @PathVariable("todoId") String todoId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos/{todoId} : Get a todo
     * Gets the details of a single instance of a &#x60;todo&#x60;.
     *
     * @param todoId A unique identifier for a &#x60;todo&#x60;. (required)
     * @return Successful response - returns a single &#x60;todo&#x60;. (status code 200)
     *         or Todo Item not found! (status code 404)
     */
    @Operation(
        operationId = "getTodo",
        summary = "Get a todo",
        description = "Gets the details of a single instance of a `todo`.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response - returns a single `todo`.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Todo.class))
            }),
            @ApiResponse(responseCode = "404", description = "Todo Item not found!")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos/{todoId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Todo> getTodo(
        @Parameter(name = "todoId", description = "A unique identifier for a `todo`.", required = true, in = ParameterIn.PATH) @PathVariable("todoId") String todoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Todo Item\", \"description\" : \"Simple Todo item\", \"created_at\" : \"2020-05-06T18:25:43.511Z\", \"due_at\" : \"2023-05-06T18:25:43.511Z\", \"completed\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos : List All todos
     * Gets a list of all &#x60;todo&#x60; entities.
     *
     * @param completed Show completed/uncompleted Todo Items (optional)
     * @return Successful response - returns an array of &#x60;todo&#x60; entities. (status code 200)
     */
    @Operation(
        operationId = "getTodos",
        summary = "List All todos",
        description = "Gets a list of all `todo` entities.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response - returns an array of `todo` entities.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Todo.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Todo>> getTodos(
        @Parameter(name = "completed", description = "Show completed/uncompleted Todo Items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "completed", required = false) Boolean completed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"Todo Item\", \"description\" : \"Simple Todo item\", \"created_at\" : \"2020-05-06T18:25:43.511Z\", \"due_at\" : \"2023-05-06T18:25:43.511Z\", \"completed\" : true }, { \"name\" : \"Todo Item\", \"description\" : \"Simple Todo item\", \"created_at\" : \"2020-05-06T18:25:43.511Z\", \"due_at\" : \"2023-05-06T18:25:43.511Z\", \"completed\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /todos/{todoId} : Update a todo
     * Updates an existing &#x60;todo&#x60;.
     *
     * @param todoId A unique identifier for a &#x60;todo&#x60;. (required)
     * @param todo Updated &#x60;todo&#x60; information. (required)
     * @return Successful response. (status code 202)
     *         or Todo Item not found! (status code 404)
     */
    @Operation(
        operationId = "updateTodo",
        summary = "Update a todo",
        description = "Updates an existing `todo`.",
        responses = {
            @ApiResponse(responseCode = "202", description = "Successful response."),
            @ApiResponse(responseCode = "404", description = "Todo Item not found!")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/todos/{todoId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateTodo(
        @Parameter(name = "todoId", description = "A unique identifier for a `todo`.", required = true, in = ParameterIn.PATH) @PathVariable("todoId") String todoId,
        @Parameter(name = "Todo", description = "Updated `todo` information.", required = true) @Valid @RequestBody Todo todo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
